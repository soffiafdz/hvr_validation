#! /usr/bin/env perl
#
# linear and non-linear fitting for hippocampus
#
# Louis collins - louis.collins@mcgill.ca
#
# Andrew Janke - rotor@cmr.uq.edu.au
# Center for Magnetic Resonance
# The University of Queensland
# http://www.cmr.uq.edu.au/~rotor
#
# Copyright Andrew Janke, The University of Queensland.
# Permission to use, copy, modify, and distribute this software and its
# documentation for any purpose and without fee is hereby granted,
# provided that the above copyright notice appear in all copies.  The
# author and the University of Queensland make no representations about the
# suitability of this software for any purpose.  It is provided "as is"
# without express or implied warranty.

use strict;
use warnings "all";
use Getopt::Tabular;
use File::Basename;
use File::Temp qw/ tempdir /;


#
#	this is the configuration array for linear fitting for hippocampus
# 
my @lin_conf = (

   { type        => "blur",              # =blur | dxyz				     
     trans       => undef,		                                              
     lsq         => [qw/-lsq12/],	 # -lsq6 | -lsq7 | -lsq9 | -lsq12 | -nonlin   
     masks	 => 0,                   # 0=dont use masks, 1=use masks		
     blur_fwhm   => 2,			 # 4, 2, 1				     
     steps       => [qw/2 2 2/],	 # no constraints			     
     tolerance   => 0.0015,		 # 0.005 is default, 0.001-0.003 is better for lin
     simplex     => 1 },		 # no constraint.                             

   { type        => "blur",
     trans       => undef,
     lsq         => [qw/-lsq12/],
     masks	 => 0,                   
     blur_fwhm   => 2,
     steps       => [qw/1.5 1.5 1.5/],
     tolerance   => 0.0015,		 # 0.005 is default, 0.001-0.003 is better for lin
     simplex     => 1 },

   );





#
#	this is the configuration array for non-linear fitting for hippocampus
#       for fitting the SUBJECT to the MODEL
my @nl_conf = (

   { type        => "blur",		# =blur | dxyz
     level       => 1,                  
     trans       => [qw/-identity/],
     masks	 => 0,                  # 0=dont use masks, 1=use masks
     blur_fwhm   => 1,			# 4, 2, 1, 0=no blur, should correspond to model.
     steps       => [qw/6 6 6/],	# no constraints
     iterations  => 20,			# between 5 - 40
     sub_lattice => 7,			# between 5-9
     lattice_diam=> [qw/10 10 10/],	# between 7-4
     weight      => 1,		# <1.0 = underrelaxation; >1.0 = overrelaxation
     stiffness   => 1,			# 1 is best, 0.9 is good.
     similarity  => 0.3,		# .3 is optimum
     extras      => undef,              # for super sampling def field
     tolerance   => 0.0001,		 # 0.005 is default, 0.0001-0.0005 is better for nonlin
     max_def_mag => 20},		# no constraint, should take into account size of object

   { type        => "blur",		# =blur | dxyz
     level       => 2,                  
     trans       => undef,
     masks	 => 0,                  # 0=dont use masks, 1=use masks
     blur_fwhm   => 1,			# 4, 2, 1, 0=no blur, should correspond to model.
     steps       => [qw/3 3 3/],	# no constraints
     iterations  => 10,			# between 5 - 40
     sub_lattice => 5,			# between 5-9
     lattice_diam=> [qw/5 5 5/],	# between 7-4
     weight      => 1,		# <1.0 = underrelaxation; >1.0 = overrelaxation
     stiffness   => 1,			# 1 is best, 0.9 is good.
     similarity  => 0.3,		# .3 is optimum
     extras      => undef,              # for super sampling def field
     tolerance   => 0.0001,		 # 0.005 is default, 0.0001-0.0005 is better for nonlin
     max_def_mag => 20},		# no constraint, should take into account size of object

   { type        => "blur",		# =blur | dxyz
     level       => 3,                  
     trans       => undef,
     masks	 => 0,                  # 0=dont use masks, 1=use masks
     blur_fwhm   => 1,			# 4, 2, 1, 0=no blur, should correspond to model.
     steps       => [qw/2 2 2/],	# no constraints
     iterations  => 5,			# between 5 - 40
     sub_lattice => 5,			# between 5-9
     lattice_diam=> [qw/5 5 5/],	# between 7-4
     weight      => 1,		# <1.0 = underrelaxation; >1.0 = overrelaxation
     stiffness   => 1,			# 1 is best, 0.9 is good.
     similarity  => 0.3,		# .3 is optimum
     extras      => undef,              # for super sampling def field
     tolerance   => 0.0001,		 # 0.005 is default, 0.0001-0.0005 is better for nonlin
     max_def_mag => 20},		# no constraint, should take into account size of object

   { type        => "blur",		# =blur | dxyz
     level       => 4,                  
     trans       => undef,
     masks	 => 1,                  # 0=dont use masks, 1=use masks
     blur_fwhm   => 1,			# 4, 2, 1, 0=no blur, should correspond to model.
     steps       => [qw/1 1 1 -no_super/],	# no constraints
     iterations  => 3,			# between 5 - 40
     sub_lattice => 4,			# between 5-9
     lattice_diam=> [qw/3 3 3/],	# between 7-4
     weight      => 0.5,		# <1.0 = underrelaxation; >1.0 = overrelaxation
     stiffness   => 1,			# 1 is best, 0.9 is good.
     similarity  => 0.3,		# .3 is optimum
     extras      => [qw/-no_super/],    # for super sampling def field
     tolerance   => 0.0001,		 # 0.005 is default, 0.0001-0.0005 is better for nonlin
     max_def_mag => 20},		# no constraint, should take into account size of object

   );



#
#	this is the configuration array for non-linear fitting for hippocampus
#       for fitting the MODEL to the SUBJECT within a limited mask
my @nl_conf_invert = (

   { type        => "blur",		# =blur | dxyz
     level       => 1,                  
     trans       => [qw/-identity/],
     masks	 => 1,                  # 0=dont use masks, 1=use masks
     blur_fwhm   => 1,			# 4, 2, 1, 0=no blur, should correspond to model.
     steps       => [qw/4 4 4/],	# no constraints
     iterations  => 20,			# between 5 - 40
     sub_lattice => 8,			# between 5-9
     lattice_diam=> [qw/15 15 15/],	# between 7-4
     weight      => 1,		# <1.0 = underrelaxation; >1.0 = overrelaxation
     stiffness   => 1,			# 1 is best, 0.9 is good.
     similarity  => 0.3,		# .3 is optimum
     extras      => undef,              # for super sampling def field
     tolerance   => 0.0001,		 # 0.005 is default, 0.0001-0.0005 is better for nonlin
     max_def_mag => 20},		# no constraint, should take into account size of object

   { type        => "blur",		# =blur | dxyz
     level       => 2,                  
     trans       => undef,
     masks	 => 1,                  # 0=dont use masks, 1=use masks
     blur_fwhm   => 1,			# 4, 2, 1, 0=no blur, should correspond to model.
     steps       => [qw/2 2 2/],	# no constraints
     iterations  => 10,			# between 5 - 40
     sub_lattice => 5,			# between 5-9
     lattice_diam=> [qw/5 5 5/],	# between 7-4
     weight      => 1,		# <1.0 = underrelaxation; >1.0 = overrelaxation
     stiffness   => 1,			# 1 is best, 0.9 is good.
     similarity  => 0.3,		# .3 is optimum
     extras      => undef,              # for super sampling def field
     tolerance   => 0.0001,		 # 0.005 is default, 0.0001-0.0005 is better for nonlin
     max_def_mag => 20},		# no constraint, should take into account size of object


   );


my($Help, $Usage, $me);
my(@opt_table, %opt, $source, $outxfm, $outfile, @args, $tmpdir);

$me = &basename($0);
%opt = (
   'verbose'   => 1,
   'model2subj'=> 0,
   'stoplevel' => 3,
   'clobber'   => 0,
   'fake'      => 0,
   'scale'     => 0,
   'nonlin'    => 0,
   'init_xfm'  => undef,
   'source_mask' => undef,
   );

$Help = <<HELP;
| $me does hierachial linear fitting between two files.
|    linear fitting is default.  non-linear is an option.
|    you will have to edit the script itself to modify the
|    fitting levels themselves
| 
| Problems or comments should be sent to: louis.collins\@mcgill.ca
HELP

$Usage = "Usage: $me [options] source.mnc output.xfm [output.mnc]\n".
         "       $me -help to list options\n\n";

@opt_table = (
   ["-verbose", "boolean", 0, \$opt{verbose},
      "be verbose" ],
   ["-subj2model", "boolean", 0, \$opt{model2subj},
      "internally, fit subj to model [default]" ],
   ["-model2subj", "boolean", 1, \$opt{model2subj},
      "internally, fit model to subj, then invert" ],
   ["-clobber", "boolean", 0, \$opt{clobber},
      "clobber existing check files" ],
   ["-fake", "boolean", 0, \$opt{fake},
      "do a dry run, (echo cmds only)" ],
   ["-nonlin", "boolean", 0, \$opt{nonlin},
      "do a nonlinear fit" ],
   ["-stoplevel", "integer", 1, \$opt{stoplevel},
      "stop at non-lin level (1,2,[3])" ],
   ["-init_xfm", "string", 1, \$opt{init_xfm},
      "initial transformation (default identity)" ],
   ["-source_mask", "string", 1, \$opt{source_mask},
      "source mask to use during fitting" ],
   );

# Check arguments
&Getopt::Tabular::SetHelp($Help, $Usage);
&GetOptions (\@opt_table, \@ARGV) || exit 1;
die $Usage if(! ($#ARGV == 1 || $#ARGV == 2));
$source = shift(@ARGV);
$outxfm = shift(@ARGV);
$outfile = (defined($ARGV[0])) ? shift(@ARGV) : undef;


my ($modeldir, $target_basename, $target, $targetmask);

$modeldir        = "/data/ipl/proj03/ICBM_HC_models/models";
$target_basename = "${modeldir}/HC_icbm_avg_152_t1_tal_nlin_symmetric_VI";
$target          = "${target_basename}.mnc";
$targetmask      = "${target_basename}_mask.mnc";


# check for files
die "$me: Couldn't find input file: $source\n\n" if (!-e $source);
die "$me: Couldn't find input file: $target\n\n" if (!-e $target);
if(-e $outxfm && !$opt{clobber}){
   die "$me: $outxfm exists, -clobber to overwrite\n\n";
   }
if(defined($outfile) && -e $outfile && !$opt{clobber}){
   die "$me: $outfile exists, -clobber to overwrite\n\n";
   }

my $mask_warning = 0;
if( !defined($opt{source_mask}) ) {
  $mask_warning = 1;
} else {
  if( !-e $opt{source_mask} ) {
    $mask_warning = 1;
  }
}

if( $mask_warning == 1 ) {
  print "Warning: For optimal results, you should use masking.\n";
  print "$Usage";
}

# make tmpdir
$tmpdir = &tempdir( "$me-XXXXXXXX", TMPDIR => 1, CLEANUP => 1 );

# set up filename base
my($i, $s_base,  $tmp_xfm, $tmp_source, $tmp_target, $tmp_targetmask, $prev_xfm);
$s_base = &basename($source);
$s_base =~ s/\.mnc(.gz)?$//;

# Mask the source and target once before blurring. Both masks must exist.

my $source_masked = $source;
my $target_masked = $target;

# initial transformation supplied by the user, applied to both the 
# source image and its mask.

if( defined $opt{init_xfm} ) { 

print "****** initial xfm: $opt{init_xfm}\n";

  my $source_resampled = "${tmpdir}/${s_base}_resampled.mnc";
  &do_cmd( 'mincresample', '-clobber', '-like', $target,
           '-transform', $opt{init_xfm}, $source_masked, $source_resampled );
  $source_masked = $source_resampled;

  my $mask_resampled = "${tmpdir}/${s_base}_mask_resampled.mnc";
  &do_cmd( 'mincresample', '-clobber', '-like', $source_masked,
           '-nearest_neighbour', '-transform', $opt{init_xfm}, 
           $opt{source_mask}, $mask_resampled );
  $opt{source_mask} = $mask_resampled;
}

$prev_xfm = undef;

my @conf = ();

if ($opt{nonlin}) {
  if ($opt{model2subj}) {
    @conf = @nl_conf_invert;
  }
  else {
    @conf = @nl_conf;
  }
}
else {
   @conf = @lin_conf;
}


# a fitting we shall go...
for ($i=0; $i<=$#conf; $i++){

    if (! $opt{nonlin} || ($conf[$i]{level} <= $opt{stoplevel})) {

	# set up intermediate files
	$tmp_xfm = "$tmpdir/$s_base\_$i.xfm";
	$tmp_source = "$tmpdir/$s_base\_$conf[$i]{blur_fwhm}";
	
	$tmp_target     = "${target_basename}\_$conf[$i]{blur_fwhm}\_$conf[$i]{type}.mnc";
	$tmp_targetmask = "${target_basename}\_$conf[$i]{blur_fwhm}\_mask.mnc";
	
	if ($opt{nonlin}) {
	    print STDOUT "-+-------------------------[$i]-------------------------\n".
                " | steps:          @{$conf[$i]{steps}}\n".
                " | masks:          $conf[$i]{masks}\n".
                " | blur_fwhm:      $conf[$i]{blur_fwhm}\n".
                " | iterations:     $conf[$i]{iterations}\n".
                " | weight:         $conf[$i]{weight}\n".
                " | stiff:          $conf[$i]{stiffness}\n".
                " | source:         $tmp_source\_$conf[$i]{type}.mnc\n".
                " | target:         $tmp_target\n".
                " | xfm:            $tmp_xfm\n".
                "-+-----------------------------------------------------\n".
                "\n";
	}
	else {
	    print STDOUT "-+-------------------------[$i]-------------------------\n".
                " | steps:          @{$conf[$i]{steps}}\n".
                " | lsq:            @{$conf[$i]{lsq}}\n".
                " | masks:          $conf[$i]{masks}\n".
                " | blur_fwhm:      $conf[$i]{blur_fwhm}\n".
                " | simplex:        $conf[$i]{simplex}\n".
                " | source:         $tmp_source\_$conf[$i]{type}.mnc\n".
                " | target:         $tmp_target\n".
                " | xfm:            $tmp_xfm\n".
                "-+-----------------------------------------------------\n".
                "\n";
	}
	
	# blur the source  images
	my @grad_opt = ();
	push( @grad_opt, '-gradient' ) if( $conf[$i]{type} eq "dxyz" );
	
	if(!-e "$tmp_source\_$conf[$i]{type}.mnc") {
	    &do_cmd('mincblur', '-clobber', '-no_apodize', '-fwhm', $conf[$i]{blur_fwhm},
		    @grad_opt, $source_masked, $tmp_source);
	}
	
	# set up registration
	if (! $opt{nonlin}) {
	    @args = ('minctracc','-clobber', '-mi', '-debug',
		     @{$conf[$i]{lsq}},
		     '-step',   @{$conf[$i]{steps}}, 
		     '-simplex', $conf[$i]{simplex},
		     '-tol',     $conf[$i]{tolerance});
	}
	else {
	    @args = ('minctracc','-clobber', '-nonlin', 'corrcoeff', '-debug',
		     '-weight',     $conf[$i]{weight},
		     '-stiffness',  $conf[$i]{stiffness}, 
		     '-similarity', $conf[$i]{similarity}, 
		     '-step',     @{$conf[$i]{steps}}, 
		     '-iterations', $conf[$i]{iterations}, 
		     '-sub_lattice',$conf[$i]{sub_lattice},
		     '-lattice_diam', @{$conf[$i]{lattice_diam}}, 
		     '-model_lattice',
		     '-max_def_magnitude',$conf[$i]{max_def_mag},	    
		     '-step',   @{$conf[$i]{steps}},
		     '-tol',     $conf[$i]{tolerance});
	}
	
	# Initial transformation will be computed from the from Principal axis 
	# transformation (PAT); or identity.
	
	push(@args, @{$conf[$i]{trans}}) if( defined $conf[$i]{trans} );
	
	push(@args, @{$conf[$i]{extras}}) if( defined $conf[$i]{extras} );
	
	# Current transformation at this step
	push(@args, '-transformation', $prev_xfm ) if( defined $prev_xfm );
	
	
	# masks (even if the blurred image is masked, it's still preferable
	# to use the mask in minctracc)
	
	if (! $opt{model2subj} ) {
	  push(@args, '-source_mask', $opt{source_mask} ) if (defined($opt{source_mask}) && ($conf[$i]{masks}>0));
	
	  push(@args, '-model_mask', $tmp_targetmask)     if ((-e $tmp_targetmask) && ($conf[$i]{masks}>0));
	
	  # add files and run registration
	  push(@args, "$tmp_source\_$conf[$i]{type}.mnc", $tmp_target, 
	       $tmp_xfm);
	}
	else {
	  push(@args, '-model_mask', $opt{source_mask} ) if (defined($opt{source_mask}) && ($conf[$i]{masks}>0));
	
	  push(@args, '-source_mask', $tmp_targetmask)     if ((-e $tmp_targetmask) && ($conf[$i]{masks}>0));
	
	  # add files and run registration
	  push(@args, $tmp_target, "$tmp_source\_$conf[$i]{type}.mnc",  
	       $tmp_xfm);
	}

	&do_cmd(@args);
	
	$prev_xfm = $tmp_xfm;
    }
}

# Concatenate transformations if an initial transformation was given.

if( defined $opt{init_xfm} ) { 
  if ( ! $opt{model2subj} ) {
    &do_cmd( 'xfmconcat', $opt{init_xfm},$prev_xfm, $outxfm );
  }
  else {
    my $inverted = "$tmpdir/inverted.xfm";
    &do_cmd( 'xfminvert', $prev_xfm, $inverted );
    &do_cmd( 'xfmconcat', $opt{init_xfm}, $inverted, $outxfm );
  }
} else {
  if ( ! $opt{model2subj} ) {
    &do_cmd( 'mv', '-f', $prev_xfm, $outxfm );
  }
  else {
    &do_cmd( 'xfminvert', $prev_xfm, $outxfm );
  }
}

# resample if required
if(defined($outfile)){
   print STDOUT "-+- creating $outfile using $outxfm\n";
   &do_cmd( 'mincresample', '-clobber', '-like', $target,
            '-transformation', $outxfm, $source, $outfile );
}


sub do_cmd { 
   print STDOUT "@_\n" if $opt{verbose};
   if(!$opt{fake}){
      system(@_) == 0 or die;
   }
}
       
